// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Event {
  id         Int        @id @default(autoincrement())
  name       String
  date       DateTime[]
  slug       String?    @unique
  time       String
  location   String
  htm        String
  link       String?
  photos     String[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  category   Category?  @relation(fields: [categoryId], references: [id])
  categoryId Int?

  guests Idol[] @relation("EventGuests")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  event     Event[]
  idols     Idol[] // Relation field to Idol
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Idol {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  sosmeds     String[]
  image       String
  description String
  createdAt   DateTime @default(now())

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])

  members Member[]
  songs   Song[]

  events Event[] @relation("EventGuests") // many-to-many relasi
}

model Member {
  id          String  @id @default(uuid())
  name        String
  image       String
  description String
  instagram   String?
  X           String?
  idolId      String
  idol        Idol    @relation(fields: [idolId], references: [id])
}

model Song {
  id         String @id @default(uuid())
  title      String
  spotifyUrl String
  idolId     String
  idol       Idol   @relation(fields: [idolId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String // e.g. "idol-add", "event-edit", etc.
  message   String
  link      String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}
