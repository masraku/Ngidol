generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Preferences - categories yang user suka
  favoriteCategories Category[] @relation("UserFavoriteCategories")
  
  // Preferences - idols yang user suka
  favoriteIdols Idol[] @relation("UserFavoriteIdols")
  
  // Preferences - members yang user suka
  favoriteMembers Member[] @relation("UserFavoriteMembers")
  
  // Saved events - events yang user simpan
  savedEvents Event[] @relation("UserSavedEvents")
  
  // Email preferences
  emailNotifications Boolean @default(true)
  eventReminders     Boolean @default(true)

  // Notifications received by the user
  notifications Notification[]

  // Email logs sent to the user
  emailLogs EmailLog[]
}

model Event {
  id         Int        @id @default(autoincrement())
  name       String
  date       DateTime[]
  slug       String?    @unique
  time       String
  location   String
  htm        String
  link       String?
  photos     String[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  category   Category?  @relation(fields: [categoryId], references: [id])
  categoryId Int?

  guests Idol[] @relation("EventGuests")
  
  // Users yang save event ini
  savedByUsers User[] @relation("UserSavedEvents")

  // Email logs related to this event
  emailLogs EmailLog[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  event     Event[]
  idols     Idol[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Users yang suka kategori ini
  favoritedByUsers User[] @relation("UserFavoriteCategories")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Idol {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  sosmeds     String[]
  image       String
  description String
  createdAt   DateTime @default(now())

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])

  members Member[]
  songs   Song[]

  events Event[] @relation("EventGuests")
  
  // Users yang suka idol ini
  favoritedByUsers User[] @relation("UserFavoriteIdols")
}

model Member {
  id          String  @id @default(uuid())
  name        String
  image       String
  description String
  instagram   String?
  X           String?
  idolId      String
  idol        Idol    @relation(fields: [idolId], references: [id])
  
  // Users yang suka member ini
  favoritedByUsers User[] @relation("UserFavoriteMembers")
}

model Song {
  id         String @id @default(uuid())
  title      String
  spotifyUrl String
  idolId     String
  idol       Idol   @relation(fields: [idolId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String // e.g. "idol-add", "event-edit", "new-event", "event-reminder"
  message   String
  link      String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  
  // Optional: jika notification untuk user spesifik
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

// Optional: Model untuk tracking email yang sudah dikirim
model EmailLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  eventId   Int?
  event     Event?   @relation(fields: [eventId], references: [id])
  type      String   // "event-notification", "event-reminder"
  sentAt    DateTime @default(now())
  status    String   // "sent", "failed", "pending"
}